---
title: "Object-Oriented Matplotlib Challenge"
subtitle: "Mastering the Four Stages of Data Visualization"
format:
  html: default
execute:
  echo: true
  eval: true
---

# üéØ Object-Oriented Matplotlib Challenge - The Four Stages of Data Visualization

::: {.callout-important}
## üìä Challenge Requirements
- Complete all discussion questions for the four stages of visualization
- Create professional visualizations using object-oriented matplotlib
- Demonstrate mastery of the Grammar of Graphics
- See [Student Analysis Section](#student-analysis-section) for detailed requirements
:::

## The Problem: Mastering Object-Oriented Matplotlib Through the Four Stages

**Core Question:** How can we create compelling, professional data visualizations using object-oriented matplotlib and the four stages of visualization?

**The Challenge:** Real-world data visualization requires more than just plotting data - it requires a systematic approach that transforms raw data into compelling stories. The four stages framework provides a proven methodology for creating visualizations that inform, persuade, and inspire action.

**Our Approach:** We'll work with baseball stadium data to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly ballpark in Major League Baseball. This investigation will take us through all four stages of visualization, demonstrating object-oriented matplotlib techniques along the way.

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## The Four Stages of Data Visualization

The four essential stages for creating effective visualizations are:

1. **Stage 1: Declaration of Purpose** - Define your message and audience
2. **Stage 2: Curation of Content** - Gather and create all necessary data
3. **Stage 3: Structuring of Visual Mappings** - Choose geometry and aesthetics
4. **Stage 4: Formatting for Your Audience** - Polish for professional presentation

## Data and Business Context

We analyze Major League Baseball stadium data to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly ballpark. This dataset is ideal for our analysis because:

- **Real Business Question:** Sports analysts and fans want to understand stadium effects on scoring
- **Clear Hypothesis:** High altitude should make Coors Field more run-friendly
- **Multiple Metrics:** We can analyze both total runs and home runs
- **Visualization Practice:** Perfect for demonstrating all four stages of visualization

## Data Loading and Initial Exploration

Let's start by loading the baseball data and understanding what we're working with.

```{python}
#| label: load-data
#| echo: true
#| message: false
#| warning: false

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import seaborn as sns

# Load 2010 baseball season data
df2010 = pd.read_csv("baseball10.csv")

# Load 2021 baseball season data for comparison
df2021 = pd.read_csv("baseball21.csv")

print("2010 data shape:", df2010.shape)
print("2021 data shape:", df2021.shape)
print("\n2010 data columns:", df2010.columns.tolist())
print("\nFirst few rows of 2010 data:")
print(df2010.head())
```

::: {.callout-note}
## üí° Understanding the Data

**Baseball Game Data:** Contains information about each game, including:
- `home`: Home team (3-letter code)
- `visiting`: Visiting team (3-letter code)
- `homeScore`: Runs scored by home team
- `visScore`: Runs scored by visiting team
- `homeHR`: Home runs by home team
- `visHR`: Home runs by visiting team
- `date`: Game date

**Business Questions We'll Answer:**
1. Is Coors Field (COL) the most run-friendly ballpark in 2010?
2. How does this change in 2021?
3. What's the difference between total runs and home runs by stadium?
:::

## Stage 1: Declaration of Purpose

**Mental Model:** Start with a clear message and bold title that states your recommendation.

Our purpose is to investigate whether Coors Field in Denver, Colorado is truly the most run-friendly baseball stadium in Major League Baseball.

::: {.callout-important}
## ü§î Discussion Questions: Stage 1 - Declaration of Purpose

**Question 1: Hypothesis Formation**
- Why might high altitude affect baseball performance?  Is Coors Field affected by high altitude?

At High altitudes we observe following components that can affect Baseball Performance:

1. Reduced Air Density:
      At higher altitudes, air is less dense due to lower atmosperic pressure. With low air resistance, baseball travels farther with the same force.

2. Decreased Air Resistance:
      Thinner air provides less drag on the baseball because of which balls maintain velocity longer through the air. Outfielders have less time to react to well-hit balls.

3. Ball Movement Reduction:
      Also called as Magnus Effect, it is the force that causes spinning ball to curve. In less dense air at high altitude, this effect is weaker causing major impact on breaking pitches.
      - Less break on pitches: Curveballs, sliders, and other breaking pitches will have less dramatic movement than at sea level.
      - Reduced "rise" on fastballs: The backspin on a four-seam fastball creates an upward Magnus force that counteracts gravity, making it "rise" relative to a pitch with no spin. At high altitude, this effect is diminished, so the fastball drops more than it would at sea level. 

4. Physical Effects on Players:
      At high altitudes, oxygen levels are reduced that can affect players endurance levels. Visiting players and those not accustomed to the elevation may experience higher fatigue, soreness, and shortness of breath, which can affect stamina over the course of a game or series. With dry moutain air, dehydration occurs much faster compared to at sea level.


Is Coors Field affected by high altitude?

Yes, Coors Field is significantly affected by high altitude. With less air resistance, it causes baseballs to fly farther and hit more home runs. This also makes pitches break less which is detrimental to pitchers who rely on breaking balls. 

:::

## Stage 2: Curation of Content

**Mental Model:** Gather and create all the data you need to support your message.

Let's aggregate the data to get average runs per stadium:

```{python}
#| label: stage-2-content
#| echo: true

# Stage 2: Curation of Content
# Aggregate data to get average runs per stadium

# Process 2010 data
avgDF_2010 = (df2010
    .assign(totalRuns = lambda df: df.homeScore + df.visScore)
    .assign(totalHR = lambda df: df.homeHR + df.visHR)
    .drop(columns = ['date', 'visiting'])
    .groupby(['home'], as_index=False)
    .mean()
)

# Process 2021 data
avgDF_2021 = (df2021
    .assign(totalRuns = lambda df: df.homeScore + df.visScore)
    .assign(totalHR = lambda df: df.homeHR + df.visHR)
    .drop(columns = ['date', 'visiting'])
    .groupby(['home'], as_index=False)
    .mean()
)

print("2010 Stadium Averages (Top 5):")
print(avgDF_2010.head())
print("\n2021 Stadium Averages (Top 5):")
print(avgDF_2021.head())
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 2 - Curation of Content

**Question 1: Data Aggregation Strategy**
- How many games are in the dataset? Why do we aggregate individual games into stadium averages before we start the visualization process? 

Based on output from Dataframe, we can get following details:

- 2010 Dataset: total 2,430 games
- 2021 Dataset: total 2,429 games
- Total 4,859 games across both seasons

Why do we aggregate individual games into stadium averages before we start the visualization process? 

The aggregation from individual games to stadium averages can serve following purposes:

1. Statistical Reliability:
      Aggregating individual games into stadium averages smooths out high variable factors like weather or team performance on that day and help revealing underlying stadium effect. Average of ~80+ games per stadium basded on both seasons provides a much more reliable measure. 

2. Meaningful Comparison:
      Our purpose is to compare stadiums & investigate whether Coors Field is truly the most run-friendly baseball stadium, not the individual games. This requires comparing stadim characteristics and not individual game outcomes. As mentioned above, individual games are influenced by high variable factors beyond the stadium itself.

3. Visualization Clarity:
      With 4,859 individual games, a visualization would be cluttered and unreadable. Stadium-level aggregation reduces the data to ~30 data points making it possible to create clear, interpretable visualizations
:::

## Stage 3: Structuring of Visual Mappings

**Mental Model:** Choose the right geometry and aesthetics to effectively communicate your message.

Let's explore different visual approaches:

```{python}
#| label: stage-3-mapping-exploration
#| echo: true

# Stage 3: Structuring of Visual Mappings
# Explore different geometries and aesthetics

# Sort data for better visualization
avgDF_2010_sorted = avgDF_2010.sort_values('totalRuns', ascending=True)

# Create figure with subplots to compare approaches
fig, axes = plt.subplots(2, 2, figsize=(8, 6))

# Approach 1: Scatter plot (not ideal for categorical data)
axes[0,0].scatter(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[0,0].set_title("Approach 1: Scatter Plot")
axes[0,0].set_xlabel("Stadium")
axes[0,0].set_ylabel("Average Runs")

# Approach 2: Horizontal bar chart (better for categorical data)
axes[0,1].barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[0,1].set_title("Approach 2: Horizontal Bar Chart")
axes[0,1].set_xlabel("Average Runs")
axes[0,1].set_ylabel("Stadium")

# Approach 3: Vertical bar chart
axes[1,0].bar(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns)
axes[1,0].set_title("Approach 3: Vertical Bar Chart")
axes[1,0].set_xlabel("Stadium")
axes[1,0].set_ylabel("Average Runs")
axes[1,0].tick_params(axis='x', rotation=45)

# Approach 4: Highlight Colorado
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]
axes[1,1].barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)
axes[1,1].set_title("Approach 4: Highlight Colorado")
axes[1,1].set_xlabel("Average Runs")
axes[1,1].set_ylabel("Stadium")

plt.tight_layout()
plt.show()
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 3 - Structuring of Visual Mappings

**Question 1: Geometry Choices**
- Why is a horizontal bar chart better than a scatter plot for this data?
- When would you choose a vertical bar chart over horizontal?

1. Data Type Mismatch
Stadiums are categorical data, not continuous variables
Scatter plots are designed for continuous x and y relationships (like height vs. weight)
Categorical data on the x-axis creates arbitrary spacing that doesn't reflect any meaningful order or distance
The "distance" between ANA and ARI has no meaning, unlike the distance between 5 feet and 6 feet
2. Visual Clarity and Readability
Bar charts show magnitude clearly through bar length
Scatter plots show individual points that are hard to compare when clustered
Horizontal bars make stadium labels easier to read (text doesn't need to be rotated)
Quick visual ranking is immediately apparent with sorted bars
3. Comparison Effectiveness
Bar length directly encodes the quantitative value (runs per game)
Bars start from a common baseline (zero), making comparisons intuitive
Scatter plots lack the visual reference that makes it easy to see "how much more" one stadium scores
Eye naturally follows the bar length to compare values
4. Highlighting Specific Categories
Color coding works better with bars (the entire bar can be colored)
Colorado's purple bar stands out clearly against the grey bars
In scatter plots, single colored points can be harder to distinguish
Annotations work more naturally with bars than floating points
5. Best Practices for Data Visualization
According to visualization principles:
Use bars for categorical comparisons ‚úì
Use scatter plots for relationship analysis (correlation, trends)
Position is the most accurate visual encoding - bars leverage this effectively
Length judgments are easier than position-only judgments


You would choose a vertical bar chart when you have time-series data or ordinal categories with short labels. These charts, also known as column charts, are ideal for showing trends over time or comparing a small number of categories that have a natural sequence (like age ranges or months) because the height of the bars naturally represents magnitude.  
When to use a vertical bar chart
Time-series data: Use a vertical chart to display changes over time, such as sales figures per quarter or website visits per month. 
Ordinal data: Choose this chart for categories that have a logical order, like age groups, educational levels, or performance ratings. The categories can be arranged along the x-axis in their natural sequence. 
Few categories: Vertical charts are best for a limited number of categories to keep the x-axis from becoming too crowded. 


**Question 2: Aesthetic Mappings**
- What does the color highlighting accomplish in Approach 4?
- How does position (x/y) compare to color for encoding data?

:::

## Stage 4: Formatting for Your Audience

**Mental Model:** Polish your visualization for professional presentation.

Let's create a publication-ready visualization:

```{python}
#| label: stage-4-formatting
#| echo: true

# Stage 4: Formatting for Your Audience
# Create a professional, publication-ready visualization

# Set style for professional appearance
plt.style.use("seaborn-v0_8-whitegrid")

# Create the main visualization
fig, ax = plt.subplots(figsize=(8, 6))

# Create color array for highlighting Colorado
colorado_colors = ["darkorchid" if stadium == "COL" else "lightgrey" 
                   for stadium in avgDF_2010_sorted.home]

# Create horizontal bar chart
bars = ax.barh(avgDF_2010_sorted.home, avgDF_2010_sorted.totalRuns, color=colorado_colors)

# Add title and labels
ax.set_title("Colorado (COL) is the Most Run-Friendly Ballpark in 2010", 
             fontsize=16, fontweight='bold', pad=20)
ax.set_xlabel("Average Runs Per Game", fontsize=12)
ax.set_ylabel("Stadium (Home Team)", fontsize=12)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")
ax.legend(handles=[colorado_bar, other_bar], loc='lower right', frameon=True)

# Add annotation for Colorado
colorado_index = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"].index[0]
colorado_runs = avgDF_2010_sorted[avgDF_2010_sorted.home == "COL"]["totalRuns"].iloc[0]
ax.annotate(f"COL: {colorado_runs:.2f} runs/game", 
            xy=(colorado_runs, colorado_index), 
            xytext=(colorado_runs + 0.5, colorado_index),
            arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
            fontsize=10, fontweight='bold', color='darkorchid')

# Set x-axis to start from 0 for better comparison
ax.set_xlim(0, max(avgDF_2010_sorted.totalRuns) * 1.1)

# Add grid for easier reading
ax.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Print summary statistics
print(f"\nSummary Statistics for 2010:")
print(f"Colorado (COL) average runs per game: {colorado_runs:.2f}")
print(f"League average runs per game: {avgDF_2010_sorted.totalRuns.mean():.2f}")
print(f"Colorado is {((colorado_runs / avgDF_2010_sorted.totalRuns.mean()) - 1) * 100:.1f}% above league average")
```

::: {.callout-important}
## ü§î Discussion Questions: Stage 4 - Formatting for Your Audience

**Question 1: Professional Formatting**
- What elements make this visualization suitable for a business presentation?
- Is the annotation on the visualization helpful?  Can you fix its placement?

:::


## Advanced Object-Oriented Techniques

**Mental Model:** Use object-oriented matplotlib to create complex, reusable visualizations.

Let's create a comprehensive comparison between 2010 and 2021:

```{python}
#| label: advanced-oo-techniques
#| echo: true

# Advanced Object-Oriented Techniques
# Create a comprehensive comparison visualization

# Prepare data for comparison
comparison_data = pd.merge(
    avgDF_2010[['home', 'totalRuns']].rename(columns={'totalRuns': 'runs_2010'}),
    avgDF_2021[['home', 'totalRuns']].rename(columns={'totalRuns': 'runs_2021'}),
    on='home', how='inner'
)

# TODO: Create the visualization

# Set style for professional appearance
plt.style.use("seaborn-v0_8-whitegrid")

# Create two-facet visualization comparing 2010 and 2021
fig, axes = plt.subplots(1, 2, figsize=(16, 8))

# Sort data by total runs for consistent ordering
comparison_data_2010 = comparison_data.sort_values('runs_2010', ascending=True)
comparison_data_2021 = comparison_data.sort_values('runs_2021', ascending=True)

# Create color arrays for highlighting Colorado
colors_2010 = ["darkorchid" if stadium == "COL" else "lightgrey" 
               for stadium in comparison_data_2010.home]
colors_2021 = ["darkorchid" if stadium == "COL" else "lightgrey" 
               for stadium in comparison_data_2021.home]

# 2010 visualization
bars_2010 = axes[0].barh(comparison_data_2010.home, comparison_data_2010.runs_2010, color=colors_2010)
axes[0].set_title("2010 Season: Average Runs Per Game by Stadium", fontsize=14, fontweight='bold')
axes[0].set_xlabel("Average Runs Per Game", fontsize=12)
axes[0].set_ylabel("Stadium (Home Team)", fontsize=12)
axes[0].grid(True, alpha=0.3)

# Add annotation for Colorado in 2010
col_2010_idx = comparison_data_2010[comparison_data_2010.home == "COL"].index[0]
col_2010_runs = comparison_data_2010[comparison_data_2010.home == "COL"]["runs_2010"].iloc[0]
axes[0].annotate(f"COL: {col_2010_runs:.2f} runs/game", 
                xy=(col_2010_runs, col_2010_idx), 
                xytext=(col_2010_runs + 0.5, col_2010_idx),
                arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
                fontsize=10, fontweight='bold', color='darkorchid')

# 2021 visualization
bars_2021 = axes[1].barh(comparison_data_2021.home, comparison_data_2021.runs_2021, color=colors_2021)
axes[1].set_title("2021 Season: Average Runs Per Game by Stadium", fontsize=14, fontweight='bold')
axes[1].set_xlabel("Average Runs Per Game", fontsize=12)
axes[1].set_ylabel("Stadium (Home Team)", fontsize=12)
axes[1].grid(True, alpha=0.3)

# Add annotation for Colorado in 2021
col_2021_idx = comparison_data_2021[comparison_data_2021.home == "COL"].index[0]
col_2021_runs = comparison_data_2021[comparison_data_2021.home == "COL"]["runs_2021"].iloc[0]
axes[1].annotate(f"COL: {col_2021_runs:.2f} runs/game", 
                xy=(col_2021_runs, col_2021_idx), 
                xytext=(col_2021_runs + 0.5, col_2021_idx),
                arrowprops=dict(arrowstyle='->', color='darkorchid', lw=2),
                fontsize=10, fontweight='bold', color='darkorchid')

# Add overall title
fig.suptitle("Colorado (COL) Stadium Performance: 2010 vs 2021", 
             fontsize=18, fontweight='bold', y=1.0)

# Add legend
colorado_bar = plt.Rectangle((0,0),1,1, color="darkorchid", label="Colorado Rockies")
other_bar = plt.Rectangle((0,0),1,1, color="lightgrey", label="Other Stadiums")
fig.legend(handles=[colorado_bar, other_bar], loc='upper center', 
           bbox_to_anchor=(0.5, 0.02), ncol=2, frameon=True)

plt.tight_layout()
plt.show()

# Print summary statistics
print(f"\nColorado Stadium Performance Summary:")
print(f"2010: {col_2010_runs:.2f} runs/game")
print(f"2021: {col_2021_runs:.2f} runs/game")
print(f"Change: {col_2021_runs - col_2010_runs:+.2f} runs/game")
print(f"\nLeague Average Comparison:")
print(f"2010 League Average: {comparison_data_2010.runs_2010.mean():.2f} runs/game")
print(f"2021 League Average: {comparison_data_2021.runs_2021.mean():.2f} runs/game")


```

::: {.callout-important}
## ü§î Discussion Questions: Advanced Object-Oriented Techniques

**Question 1: Using Subplot Layout**
- Create a two-facet visualization that shows the total runs for 2010 and 2021 for each stadium in a single figure.  Highlight Colorado in the visualization.

**Question 2: Explanation of the Visualization**

This two-facet visualization effectively demonstrates Colorado's stadium effect across two different seasons. The side-by-side comparison reveals that Colorado (COL) consistently ranks among the highest-scoring stadiums in both 2010 and 2021, with the dark purple highlighting making it immediately identifiable. The horizontal bar charts allow for easy comparison of all stadiums within each season, while the consistent sorting and color scheme enable cross-season analysis. The annotations provide specific numerical values for Colorado's performance, and the summary statistics below the visualization quantify both Colorado's absolute performance and its relative position compared to league averages. This visualization successfully supports the hypothesis that Coors Field's high altitude creates a consistently run-friendly environment, as evidenced by Colorado's sustained high ranking across different seasons and different competitive eras of baseball.
:::

## Student Analysis Section: Mastering Object-Oriented Matplotlib {#student-analysis-section}

**Your Task:** Demonstrate your mastery of object-oriented matplotlib and the four stages of visualization through comprehensive analysis and creation of professional visualizations.

### Core Challenge: Four Stages Analysis

**For each stage, provide:**
- Clear, concise answers to all discussion questions
- Code examples when asked to do so
- Demonstration of object-oriented matplotlib techniques

### Professional Visualizations (For 100% Grade)

**Your Task:** Create a professional visualization and narrative that builds towards and demonstrates mastery of object-oriented matplotlib and the four stages framework.

**Create visualizations showing:**
- Stadium run-friendliness comparison between 2010 and 2021
- Focus on Colorado's performance relative to other stadiums
- Use object-oriented matplotlib techniques throughout

**Your visualizations should:**
- Use clear labels and professional formatting
- Demonstrate all four stages of visualization
- Be appropriate for a business audience
- Show mastery of object-oriented matplotlib
- Do not `echo` the code that creates the visualizations

## Getting Started: Repository Setup üöÄ

::: {.callout-important}
## üìÅ Getting Started

**Step 1:** Fork and clone this challenge repository: `https://github.com/flyaflya/dataVizChallenge`
- Fork it to your GitHub account, then clone it from your GitHub account to your local machine

**Step 2:** Set up your Python environment
- **Recommended:** Use your existing virtual environment from Tech Setup Challenge Part 2
  - Press `Ctrl+Shift+P` ‚Üí "Python: Select Interpreter"
  - Navigate to your existing virtual environment (e.g., `your-previous-project/venv/Scripts/python.exe`)
  - Install additional packages: `pip install pandas numpy matplotlib seaborn`
- **Alternative:** Create a new virtual environment following [Quarto documentation](https://quarto.org/docs/projects/virtual-environments.html)

**Step 3:** You're ready to start! The data loading code and starter code for the visualizations are already provided in this file.

**Note:** This challenge uses the same `index.qmd` file you're reading right now - you'll edit it to complete your analysis.
:::

::: {.callout-warning}
## ‚ö†Ô∏è Cloud Storage Warning

**Avoid using Google Drive, OneDrive, or other cloud storage for Python projects!** These services can cause issues with package installations and virtual environment corruption. Keep your Python projects in a local folder like `C:\Users\YourName\Documents\` instead.
:::

::: {.callout-note}
## üéØ Object-Oriented Matplotlib Philosophy

*Think of object-oriented matplotlib like directing a movie - you control every element (camera angles, lighting, actors) to create the perfect scene that tells your story.*
:::

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**
- After completing each stage section
- After adding your visualizations
- After completing your advanced object-oriented techniques
- Before asking the AI for help with new code

**How to commit:**
1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Grading Rubric üéì

**85% Grade:** Complete discussion questions for all 4 stages with comprehensive, well-reasoned responses.

**100% Grade:** Complete all discussion questions plus create professional visualizations as requested that demonstrate mastery of the four stages framework.

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Fork repository named "dataVizChallenge" to your GitHub account
- [ ] Clone repository locally using Cursor (or VS Code)
- [ ] Completed discussion questions for at least 3 of the 4 stages
- [ ] Document rendered to HTML successfully
- [ ] HTML files uploaded to your repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/dataVizChallenge/`

**85% Grade Requirements:**

- [ ] Complete discussion questions for all 4 stages
- [ ] Comprehensive, well-reasoned responses showing deep understanding

**100% Grade Requirements:**

- [ ] All discussion questions completed with professional quality
- [ ] Professional visualization as requested demonstrating four stages framework

**Report Quality (Critical for Higher Grades):**

- [ ] Professional writing style (no AI-generated fluff)
- [ ] Concise analysis that gets to the point
- [ ] Clear demonstration of object-oriented matplotlib 